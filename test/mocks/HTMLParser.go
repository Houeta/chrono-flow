// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Houeta/chrono-flow/internal/models"
)

// HTMLParser is an autogenerated mock type for the HTMLParser type
type HTMLParser struct {
	mock.Mock
}

// GetHTMLResponse provides a mock function with given fields: ctx
func (_m *HTMLParser) GetHTMLResponse(ctx context.Context) (*http.Response, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHTMLResponse")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*http.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *http.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseProducts provides a mock function with given fields: ctx
func (_m *HTMLParser) ParseProducts(ctx context.Context) ([]models.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ParseProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseTableResponse provides a mock function with given fields: ctx, inp
func (_m *HTMLParser) ParseTableResponse(ctx context.Context, inp io.ReadCloser) ([]models.Product, error) {
	ret := _m.Called(ctx, inp)

	if len(ret) == 0 {
		panic("no return value specified for ParseTableResponse")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadCloser) ([]models.Product, error)); ok {
		return rf(ctx, inp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadCloser) []models.Product); ok {
		r0 = rf(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.ReadCloser) error); ok {
		r1 = rf(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHTMLParser creates a new instance of HTMLParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTMLParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTMLParser {
	mock := &HTMLParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
